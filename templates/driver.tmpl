// Code generated by gogen; DO NOT EDIT.

{{$u := .EntityName | camelcase }}
{{$lu := .EntityName | lower }}

package {{ .Package }}

import (
	"context"

	"github.com/HMasataka/transactor/rdbms"
	"github.com/volatiletech/sqlboiler/v4/boil"
)

type {{ $lu }}Driver struct {
	clientProvider rdbms.ClientProvider
}

func New{{ $u }}Driver(clientProvider rdbms.ClientProvider) driver.{{ $u }}Driver {
	return &{{ $lu }}Driver{
		clientProvider: clientProvider,
	}
}

func (r *{{ $lu }}Driver) Insert(ctx context.Context, target *entity.{{ $u }}) error {
	client := r.clientProvider.CurrentClient(ctx)
	return target.Insert(ctx, client, boil.Infer())
}

func (r *{{ $lu }}Driver) Find(ctx context.Context, {{ $lu }}ID string) (*entity.{{ $u }}, error) {
	client := r.clientProvider.CurrentClient(ctx)

	{{ $lu }}, err := entity.{{ $u }}s(entity.{{ $u }}Where.ID.EQ({{ $lu }}ID)).One(ctx, client)
	if wrapError(err) != nil {
		return nil, err
	}

	return {{ $lu }}, nil
}

func (r *{{ $lu }}Driver) Update(ctx context.Context, target *entity.{{ $u }}) error {
	client := r.clientProvider.CurrentClient(ctx)
	_, err := target.Update(ctx, client, boil.Infer())

	return err
}

func (r *{{ $lu }}Driver) Delete(ctx context.Context, target *entity.{{ $u }}) error {
	client := r.clientProvider.CurrentClient(ctx)
	_, err := target.Delete(ctx, client)

	return err
}
